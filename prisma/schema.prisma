generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String         @unique
  firstname     String?
  lastname      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  clerkid       String         @unique
  role          USER_ROLE      @default(USER)
  notifications Notification[]
  files         File[]
  subscription  Subscription?
  credit        Credit?
  billings      Billing[]
}

model File {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  tweetUrl    String
  htmlContent String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.Uuid
}

model Subscription {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User            User?             @relation(fields: [userId], references: [id])
  userId          String?           @unique @db.Uuid
  createdAt       DateTime          @default(now())
  plan            SUBSCRIPTION_PLAN @default(FREE)
  generationMonth DateTime?         @default(now())
  nextBillingDate DateTime?
  updatedAt       DateTime          @updatedAt
  customerId      String?           @unique
}

model Billing {
  id          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?             @relation(fields: [userId], references: [id])
  userId      String?           @unique @db.Uuid
  amount      Int
  currency    String
  plan        SUBSCRIPTION_PLAN
  billingDate DateTime          @default(now())
  description String?
  status      BILLING_STATUS    @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Credit {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User            User?            @relation(fields: [userId], references: [id])
  userId          String?          @unique @db.Uuid
  totalCredits    Int              @default(5)
  usedCredits     Int              @default(0)
  allocationsType ALLOCATIONS_TYPE @default(LIFETIME)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Notification {
  id        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User      User?             @relation(fields: [userId], references: [id])
  userId    String?           @db.Uuid
  content   String
  type      NOTIFICATION_TYPE
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

enum SUBSCRIPTION_PLAN {
  ENTERPRISE
  PRO
  FREE
}

enum ALLOCATIONS_TYPE {
  MONTH
  YEAR
  LIFETIME
}

enum USER_ROLE {
  USER
  ADMIN
}

enum NOTIFICATION_TYPE {
  INFO
  SUCCESS
  WARNING
}

enum BILLING_STATUS {
  PAID
  PENDING
  FAILED
}
