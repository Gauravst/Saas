generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String         @unique
  firstname     String?
  lastname      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  clerkid       String         @unique
  role          USER_ROLE      @default(USER)
  notifications Notification[]
  files         File[]
  subscription  Subscription?
  credit        Credit?
  billings      Billing[]
  setting       Setting?
}

model Setting {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User                User?    @relation(fields: [userId], references: [id])
  userId              String?  @unique @db.Uuid
  notificationsEmails Boolean  @default(true)
  autoSave            Boolean  @default(true)
  language            String   @default("English")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model File {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text             String           @db.Text
  tweeetId         String
  tweetUrl         String
  likeCount        Int              @default(0)
  bookmarkCount    Int              @default(0)
  impressionCount  Int              @default(0)
  quoteCount       Int              @default(0)
  retweetCount     Int              @default(0)
  replyCount       Int              @default(0)
  authorId         String
  authorName       String
  authorUsername   String
  authorPic        String
  authorVerified   Boolean          @default(false)
  tweetCreatedDate DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [userId], references: [id])
  userId           String           @db.Uuid
  tweetMedia       TweetMedia[]
  preferences      FilePreferences?
}

model TweetMedia {
  id       String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mediaKey String?
  url      String?
  type     TWEET_MEDIA_TYPE @default(PHOTO)
  File     File?            @relation(fields: [fileId], references: [id])
  fileId   String?          @db.Uuid
}

model FilePreferences {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  theme          TWEET_THEME     @default(DARK)
  fgPadding      Int             @default(4)
  bgPadding      Int             @default(2)
  fgRadius       String          @default("sm")
  bgRadius       String          @default("sm")
  bgBackground   FileBackground? @relation("BgBackground")
  fgBackground   FileBackground? @relation("FgBackground")
  fgShadow       String          @default("lg")
  fgTransparency Int             @default(100)
  hideDate       Boolean         @default(false)
  hideMetrics    Boolean         @default(false)
  hideLogo       Boolean         @default(false)
  file           File?           @relation(fields: [fileId], references: [id])
  fileId         String?         @unique @db.Uuid
}

model FileBackground {
  id                  String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key                 String?          @default("no-background")
  image               Boolean?         @default(false)
  url                 String?          @default("null")
  FilePreferencesBg   FilePreferences? @relation("BgBackground", fields: [FilePreferencesBgId], references: [id])
  FilePreferencesFg   FilePreferences? @relation("FgBackground", fields: [FilePreferencesFgId], references: [id])
  FilePreferencesBgId String?          @unique @db.Uuid
  FilePreferencesFgId String?          @unique @db.Uuid
}

model Subscription {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User            User?             @relation(fields: [userId], references: [id])
  userId          String?           @unique @db.Uuid
  createdAt       DateTime          @default(now())
  plan            SUBSCRIPTION_PLAN @default(FREE)
  generationMonth DateTime?         @default(now())
  nextBillingDate DateTime?
  updatedAt       DateTime          @updatedAt
  customerId      String?           @unique
}

model Billing {
  id          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?             @relation(fields: [userId], references: [id])
  userId      String?           @unique @db.Uuid
  amount      Int
  currency    String
  plan        SUBSCRIPTION_PLAN
  billingDate DateTime          @default(now())
  description String?
  status      BILLING_STATUS    @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Credit {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User            User?            @relation(fields: [userId], references: [id])
  userId          String?          @unique @db.Uuid
  totalCredits    Int              @default(5)
  usedCredits     Int              @default(0)
  allocationsType ALLOCATIONS_TYPE @default(LIFETIME)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Notification {
  id        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User      User?             @relation(fields: [userId], references: [id])
  userId    String?           @db.Uuid
  content   String
  type      NOTIFICATION_TYPE
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

enum SUBSCRIPTION_PLAN {
  ENTERPRISE
  PRO
  FREE
}

enum ALLOCATIONS_TYPE {
  MONTH
  YEAR
  LIFETIME
}

enum USER_ROLE {
  USER
  ADMIN
}

enum NOTIFICATION_TYPE {
  INFO
  SUCCESS
  WARNING
}

enum BILLING_STATUS {
  PAID
  PENDING
  FAILED
}

enum TWEET_THEME {
  DARK
  LIGHT
}

enum TWEET_MEDIA_TYPE {
  PHOTO
}
